//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../axios-client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions  } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import { Client as ClientClass } from '../axios-client';
import { createClient, getClientFactory } from './helpers';

export const Client = () => getClientFactory()(ClientClass);

    
export function findUrl(): string {
  let url_ = getBaseUrl() + "/find";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let findDefaultOptions: UseQueryOptions<Types.SuccessResponse, unknown, Types.SuccessResponse> = {
  queryFn: __find,
};
export function getFindDefaultOptions(): UseQueryOptions<Types.SuccessResponse, unknown, Types.SuccessResponse> {
  return findDefaultOptions;
};
export function setFindDefaultOptions(options: UseQueryOptions<Types.SuccessResponse, unknown, Types.SuccessResponse>) {
  findDefaultOptions = options;
}

export function findQueryKey(): QueryKey;
export function findQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'Client',
      'find',
    ]);
}
function __find() {
  return Client().find(
    );
}

/**
 * Finds single report
 * @return return successfully
 */
export function useFindQuery<TSelectData = Types.SuccessResponse, TError = unknown>(options?: UseQueryOptions<Types.SuccessResponse, TError, TSelectData>): UseQueryResult<TSelectData, TError>;
export function useFindQuery<TSelectData = Types.SuccessResponse, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.SuccessResponse, TError, TSelectData> | undefined = undefined;
  

  options = params[0] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.SuccessResponse, TError, TSelectData>({
    queryFn: __find,
    queryKey: findQueryKey(),
    ...findDefaultOptions as unknown as UseQueryOptions<Types.SuccessResponse, TError, TSelectData>,
    ...options,
  });
}
/**
 * Finds single report
 * @return return successfully
 */
export function setFindData(queryClient: QueryClient, updater: (data: Types.SuccessResponse | undefined) => Types.SuccessResponse, ) {
  queryClient.setQueryData(findQueryKey(),
    updater
  );
}

/**
 * Finds single report
 * @return return successfully
 */
export function setFindDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.SuccessResponse | undefined) => Types.SuccessResponse) {
  queryClient.setQueryData(queryKey, updater);
}