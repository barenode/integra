/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * Integra API - OpenAPI 3.0
 * This is ....
 * OpenAPI spec version: 1.0.11
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useInfiniteQuery
} from 'react-query'
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  QueryFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey
} from 'react-query'
import type {
  SuccessResponse,
  ErrorResponse
} from '../model'


/**
 * @summary Finds single report
 */
export const find = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SuccessResponse>> => {
    return axios.get(
      `/find`,options
    );
  }


export const getFindQueryKey = () => [`/find`];

    
export type FindInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof find>>>
export type FindInfiniteQueryError = AxiosError<ErrorResponse>

export const useFindInfinite = <TData = Awaited<ReturnType<typeof find>>, TError = AxiosError<ErrorResponse>>(
  options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof find>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof find>>> = ({ signal }) => find({ signal, ...axiosOptions });


  

  const query = useInfiniteQuery<Awaited<ReturnType<typeof find>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export type FindQueryResult = NonNullable<Awaited<ReturnType<typeof find>>>
export type FindQueryError = AxiosError<ErrorResponse>

export const useFind = <TData = Awaited<ReturnType<typeof find>>, TError = AxiosError<ErrorResponse>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof find>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof find>>> = ({ signal }) => find({ signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof find>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


