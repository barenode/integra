/**
 * Generated by orval v6.11.1 🍺
 * Do not edit manually.
 * Integra API - OpenAPI 3.0
 * This is ....
 * OpenAPI spec version: 1.0.11
 */
import {
  useQuery
} from 'react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  Report,
  ErrorResponse
} from './model'
import { customInstance } from './custom-instance';
import type { ErrorType } from './custom-instance';


/**
 * @summary Finds single report
 */
export const find = (
    
 signal?: AbortSignal
) => {
      return customInstance<Report>(
      {url: `/api/v1/find`, method: 'get', signal
    },
      );
    }
  

export const getFindQueryKey = () => [`/api/v1/find`];

    
export type FindQueryResult = NonNullable<Awaited<ReturnType<typeof find>>>
export type FindQueryError = ErrorType<ErrorResponse>

export const useFind = <TData = Awaited<ReturnType<typeof find>>, TError = ErrorType<ErrorResponse>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof find>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof find>>> = ({ signal }) => find(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof find>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


